import os

import numpy as np
import spectral.io.envi as envi
import spectral

VIS_BANDS = [397.66, 400.28, 402.9, 405.52, 408.13, 410.75, 413.37, 416.0, 418.62, 421.24, 423.86, 426.49, 429.12, 431.74, 434.37, 437.0, 439.63, 442.26, 444.89, 447.52, 450.16, 452.79, 455.43, 458.06, 460.7, 463.34, 465.98, 468.62, 471.26, 473.9, 476.54, 479.18, 481.83, 484.47, 487.12, 489.77, 492.42, 495.07, 497.72, 500.37, 503.02, 505.67, 508.32, 510.98, 513.63, 516.29, 518.95, 521.61, 524.27, 526.93, 529.59, 532.25, 534.91, 537.57, 540.24, 542.91, 545.57, 548.24, 550.91, 553.58, 556.25, 558.92, 561.59, 564.26, 566.94, 569.61, 572.29, 574.96, 577.64, 580.32, 583.0, 585.68, 588.36, 591.04, 593.73, 596.41, 599.1, 601.78, 604.47, 607.16, 609.85, 612.53, 615.23, 617.92, 620.61, 623.3, 626.0, 628.69, 631.39, 634.08, 636.78, 639.48, 642.18, 644.88, 647.58, 650.29, 652.99, 655.69, 658.4, 661.1, 663.81, 666.52, 669.23, 671.94, 674.65, 677.36, 680.07, 682.79, 685.5, 688.22, 690.93, 693.65, 696.37, 699.09, 701.81, 704.53, 707.25, 709.97, 712.7, 715.42, 718.15, 720.87, 723.6, 726.33, 729.06, 731.79, 734.52, 737.25, 739.98, 742.72, 745.45, 748.19, 750.93, 753.66, 756.4, 759.14, 761.88, 764.62, 767.36, 770.11, 772.85, 775.6, 778.34, 781.09, 783.84, 786.58, 789.33, 792.08, 794.84, 797.59, 800.34, 803.1, 805.85, 808.61, 811.36, 814.12, 816.88, 819.64, 822.4, 825.16, 827.92, 830.69, 833.45, 836.22, 838.98, 841.75, 844.52, 847.29, 850.06, 852.83, 855.6, 858.37, 861.14, 863.92, 866.69, 869.47, 872.25, 875.03, 877.8, 880.58, 883.37, 886.15, 888.93, 891.71, 894.5, 897.28, 900.07, 902.86, 905.64, 908.43, 911.22, 914.02, 916.81, 919.6, 922.39, 925.19, 927.98, 930.78, 933.58, 936.38, 939.18, 941.98, 944.78, 947.58, 950.38, 953.19, 955.99, 958.8, 961.6, 964.41, 967.22, 970.03, 972.84, 975.65, 978.46, 981.27, 984.09, 986.9, 989.72, 992.54, 995.35, 998.17, 1000.99, 1003.81]
NIR_BANDS = [919.678, 922.9758, 926.2727, 929.5688, 932.864, 936.1584, 939.452, 942.7448, 946.0367, 949.3277, 952.618, 955.9074, 959.196, 962.4838, 965.7708, 969.057, 972.3423, 975.6269, 978.9106, 982.1935, 985.4756, 988.757, 992.0375, 995.3172, 998.5962, 1001.8743, 1005.1517, 1008.4282, 1011.704, 1014.979, 1018.2533, 1021.5267, 1024.7994, 1028.0713, 1031.3424, 1034.6128, 1037.8824, 1041.1513, 1044.4193, 1047.6867, 1050.9532, 1054.219, 1057.4841, 1060.7484, 1064.012, 1067.2748, 1070.5369, 1073.7982, 1077.0588, 1080.3187, 1083.5778, 1086.8363, 1090.0939, 1093.3509, 1096.6071, 1099.8627, 1103.1175, 1106.3715, 1109.6249, 1112.8776, 1116.1295, 1119.3808, 1122.6313, 1125.8811, 1129.1303, 1132.3787, 1135.6265, 1138.8735, 1142.1199, 1145.3656, 1148.6106, 1151.8549, 1155.0985, 1158.3415, 1161.5837, 1164.8253, 1168.0663, 1171.3065, 1174.5461, 1177.7851, 1181.0234, 1184.261, 1187.4979, 1190.7342, 1193.9699, 1197.2049, 1200.4392, 1203.673, 1206.906, 1210.1384, 1213.3702, 1216.6014, 1219.8319, 1223.0618, 1226.2911, 1229.5197, 1232.7477, 1235.9751, 1239.2019, 1242.428, 1245.6536, 1248.8785, 1252.1028, 1255.3265, 1258.5496, 1261.7721, 1264.994, 1268.2153, 1271.4361, 1274.6562, 1277.8757, 1281.0946, 1284.313, 1287.5308, 1290.7479, 1293.9645, 1297.1806, 1300.396, 1303.6109, 1306.8252, 1310.039, 1313.2522, 1316.4648, 1319.6768, 1322.8883, 1326.0993, 1329.3097, 1332.5195, 1335.7288, 1338.9376, 1342.1458, 1345.3534, 1348.5606, 1351.7671, 1354.9732, 1358.1787, 1361.3837, 1364.5882, 1367.7921, 1370.9955, 1374.1984, 1377.4008, 1380.6027, 1383.804, 1387.0049, 1390.2052, 1393.405, 1396.6043, 1399.8031, 1403.0015, 1406.1993, 1409.3966, 1412.5935, 1415.7898, 1418.9857, 1422.181, 1425.3759, 1428.5703, 1431.7643, 1434.9577, 1438.1507, 1441.3432, 1444.5353, 1447.7269, 1450.918, 1454.1086, 1457.2988, 1460.4886, 1463.6778, 1466.8667, 1470.0551, 1473.243, 1476.4305, 1479.6175, 1482.8041, 1485.9903, 1489.1761, 1492.3614, 1495.5462, 1498.7307, 1501.9147, 1505.0983, 1508.2814, 1511.4642, 1514.6465, 1517.8285, 1521.01, 1524.1911, 1527.3718, 1530.552, 1533.7319, 1536.9114, 1540.0905, 1543.2692, 1546.4475, 1549.6254, 1552.8029, 1555.9801, 1559.1568, 1562.3332, 1565.5092, 1568.6848, 1571.86, 1575.0349, 1578.2094, 1581.3835, 1584.5573, 1587.7307, 1590.9037, 1594.0764, 1597.2487, 1600.4207, 1603.5923, 1606.7636, 1609.9345, 1613.1051, 1616.2753, 1619.4453, 1622.6148, 1625.7841, 1628.953, 1632.1215, 1635.2898, 1638.4577, 1641.6253, 1644.7926, 1647.9595, 1651.1262, 1654.2925, 1657.4585, 1660.6242, 1663.7896, 1666.9547, 1670.1195, 1673.284, 1676.4483, 1679.6122, 1682.7758, 1685.9391, 1689.1022, 1692.2649, 1695.4274, 1698.5896, 1701.7515, 1704.9131, 1708.0745, 1711.2356, 1714.3964, 1717.557, 1720.7173, 1723.8773, 1727.0371]


def load_envi(_fname, origin):
    path = os.path.join(origin, _fname)

    _exts = '.bin'
    if not os.path.exists('%s%s' % (path, _exts)):
        _exts = '.img'

    if not os.path.exists('%s%s' % (path, _exts)):
        raise spectral.io.spyfile.FileNotFoundError("Could not find data for: %s" % path)

    envi_header = envi.open('%s.hdr' % path, image='%s%s' % (path, _exts))
    envi_data = envi_header.load()
    return envi_header, envi_data


def mkdir(_dir):
    if not os.path.exists(_dir):
        os.makedirs(_dir)


def save_envi(path, _image, force=False):
    mkdir(path[:path.rfind("/")])

    envi.save_image('%s.hdr' % path, _image, ext='.bin', force=force)
    # print("Wrote envi file to: %s " % path)


def use_references(intensities, white_reference, dark_reference=None):
    if white_reference.ndim == 3:
        white_reference = white_reference.mean(axis=0)

    if dark_reference is None:
        return np.divide(intensities, white_reference, out=np.zeros_like(intensities), where=white_reference!=0)
    else:
        if dark_reference.ndim == 3:
            dark_reference = dark_reference.mean(axis=0)

        # there seems to be some bad referencing values
        # so set all negative values to zero.
        a = intensities - dark_reference
        # a[a < 0] = 0
        b = white_reference - dark_reference
        # b[b < 0] = 0
        return np.divide(a, b, out=np.zeros_like(intensities), where=b != 0)


def load_referenced_envi(_fname, origin):
    _raw_envi_header, _raw_envi_data = load_envi(_fname, origin)
    _white_envi_header, _white_envi_data = load_envi(_fname + "_White", origin)
    _dark_envi_header, _dark_envi_data = load_envi(_fname + "_Dark", origin)

    return _raw_envi_header, use_references(_raw_envi_data, _white_envi_data, _dark_envi_data)






